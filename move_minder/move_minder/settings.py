"""
Django settings for move_minder project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from django.urls import reverse_lazy
from dotenv import load_dotenv
from pathlib import Path
import os
import re
from storages.backends.s3boto3 import S3Boto3Storage

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('ENV') == 'DEV'

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'https://moveminder-tracker-f210fd4c1414.herokuapp.com/', "23.243.226.209", "moveminder-tracker-f210fd4c1414.herokuapp.com"]

BASE_URL = "http://localhost:8000" if DEBUG else "https://moveminder-tracker-f210fd4c1414.herokuapp.com"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'phonenumber_field',
    'tailwind',
    'tracker',
    'theme',
    'django_browser_reload',
    'fontawesomefree',
    'pwa'
]

TAILWIND_APP_NAME = 'theme'

INTERNAL_IPS = [
    '127.0.0.1'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
    'tracker.middleware.FrameOptionsMiddleware'
]

ROOT_URLCONF = 'move_minder.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'tracker/templates/tracker')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media'
            ],
        },
    },
]

WSGI_APPLICATION = 'move_minder.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

CONN_STR = os.environ.get('JAWSDB_URL') if os.environ.get('ENV') == 'PROD' else ''

conn_pattern = re.compile(r'^\w{5}://([a-z]+):([a-z0-9]+)@([a-z0-9.-]+):(\d+)/([a-z0-9]+)$')
conn_str_match = conn_pattern.fullmatch(CONN_STR) if os.environ.get('ENV') == 'PROD' else None

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT')
    }
} if os.environ.get('ENV') == 'DEV' else {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': conn_str_match.group(5),
        'USER': conn_str_match.group(1),
        'PASSWORD': conn_str_match.group(2),
        'HOST': conn_str_match.group(3),
        'PORT': conn_str_match.group(4)
    }
}

# Authentication

LOGIN_URL = reverse_lazy("tracker:login")

LOGIN_REDIRECT_URL = reverse_lazy("tracker:dashboard")

LOGOUT_REDIRECT_URL = reverse_lazy("tracker:home")

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


#AWS

AWS_STORAGE_BUCKET_NAME='move-minder'

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY')

AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = f'{BASE_DIR}/move_minder/static'

STATICFILES_DIRS = [
    "move_minder/tracker/static",
    "move_minder/theme/static",
    "move_minder/static"
]

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"
    }
}

MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Sites
SITE_ID = 1
DOMAIN = os.environ.get('DOMAIN')

# PhoneNumberField
PHONENUMBER_DB_FORMAT = "NATIONAL"
PHONENUMBER_DEFAULT_REGION = "US"

# Progressive Web App (django-pwa)

PWA_APP_NAME = 'MoveMinder'
PWA_APP_DESCRIPTION = "Organize | Track | Recover :: Create a record for each box or bag documenting what it contains. Scan the QR code on each label to quickly update the status of the item. In the unfortunate event that something does not reach the destination, you may be able to recover certain costs from your moving company."
PWA_APP_THEME_COLOR = '#0f172a'
PWA_APP_BACKGROUND_COLOR = '#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
    {
        'src': f"{STATIC_URL}images/icons/move_minder_icon.png",
        'sizes': '160x160'
    }
]
PWA_APP_ICONS_APPLE = [
    {
        'src': f"{STATIC_URL}images/icons/move_minder_icon.png",
        'sizes': '160x160'
    }
]
PWA_APP_SPLASH_SCREEN = [
    {
        'src': f"{STATIC_URL}images/splash.png",
        'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
    }
]
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'en-US'
PWA_APP_SHORTCUTS = [
    {
        'name': 'Receiving',
        'url': reverse_lazy('tracker:receiving'),
        'description': 'Scan packages to update status'
    }
]
PWA_APP_SCREENSHOTS = []
PWA_APP_DEBUG_MODE = os.environ.get('ENV') == 'DEV'